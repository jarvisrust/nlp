use tagger::tags;

pub fn parse_tag<'a>(input: &'a str) -> tags::TagPair<'a, BrownTag> {
    // Split the input string
    let mut parts = input.split("/");

    // Get the word
    let new_word = parts.next().unwrap();

    let new_tag = match parts.next().unwrap() {
        "." => BrownTag::SentenceCloser,
        "(" => BrownTag::LeftParen,
        ")" => BrownTag::RightParen,
        "*" => BrownTag::Not,
        "--" => BrownTag::Dash,
        "," => BrownTag::Comma,
        ":" => BrownTag::Colon,
        "abl" => BrownTag::PreQualifier,
        "abn" => BrownTag::PreQuantifierN,
        "abx" => BrownTag::PreQuantifierX,
        "ap" => BrownTag::PostDeterminer,
        "at" => BrownTag::Article,
        "be" => BrownTag::Be,
        "bed" => BrownTag::Were,
        "bedz" => BrownTag::Was,
        "beg" => BrownTag::Being,
        "bem" => BrownTag::Am,
        "ben" => BrownTag::Been,
        "ber" => BrownTag::Are,
        "bez" => BrownTag::Is,
        "cc" => BrownTag::CoordinatingConjunction,
        "cd" => BrownTag::CardinalNumeral,
        "cs" => BrownTag::SubordinatingConjunction,
        "do" => BrownTag::Do,
        "dod" => BrownTag::Did,
        "doz" => BrownTag::Does,
        "dt" => BrownTag::SingularDeterminer,
        "dti" => BrownTag::DeterminerQualifier,
        "dts" => BrownTag::PluralDeterminer,
        "dtx" => BrownTag::DoubleConjunction,
        "ex" => BrownTag::Existential,
        "fw" => BrownTag::ForeignWord,
        "hl" => BrownTag::WordInHeadline,
        "hv" => BrownTag::Have,
        "hvd" => BrownTag::HadPast,
        "hvg" => BrownTag::Having,
        "hvn" => BrownTag::HadPastParticiple,
        "hvz" => BrownTag::Has,
        "in" => BrownTag::Preposition,
        "jj" => BrownTag::Adjective,
        "jjr" => BrownTag::ComparativeAdjective,
        "jjs" => BrownTag::SemSuperlativeAdjective,
        "jjt" => BrownTag::MorphSuperlativeAdjective,
        "md" => BrownTag::ModalAuxiliary,
        "nc" => BrownTag::Cited,
        "nn" => BrownTag::Noun,
        "nn$" => BrownTag::PossessiveSingularNoun,
        "nns" => BrownTag::PluralNoun,
        "nns$" => BrownTag::PossessivePluralProperNoun,
        "np" => BrownTag::ProperNoun,
        "np$" => BrownTag::PossessiveProperNoun,
        "nps" => BrownTag::PluralProperNoun,
        "nps$" => BrownTag::PossessivePluralProperNoun,
        "nr" => BrownTag::AdverbialNoun,
        "nrs" => BrownTag::PluralAdverbialNoun,
        "od" => BrownTag::OrdinalNumeral,
        "pn" => BrownTag::NominalPronoun,
        "pn$" => BrownTag::PossessiveNominalPronoun,
        "pp$" => BrownTag::PossessivePersonalPronoun,
        "pp$$" => BrownTag::SecondPossessivePronoun,
        "ppl" => BrownTag::SingularReflexivePersonalPronoun,
        "ppls" => BrownTag::PluralReflexivePersonalPronoun,
        "ppo" => BrownTag::ObjectivePersonalPronoun,
        "pps" => BrownTag::SingularNominativePronoun,
        "ppss" => BrownTag::OtherNominativePersonalPronoun,
        "ql" => BrownTag::Qualifier,
        "qlp" => BrownTag::PostQualifier,
        "rb" => BrownTag::Adverb,
        "rbr" => BrownTag::ComparativeAdverb,
        "rbt" => BrownTag::SuperlativeAdverb,
        "rn" => BrownTag::NominalAdverb,
        "rp" => BrownTag::AdverbParticle,
        "tl" => BrownTag::WordInTitle,
        "to" => BrownTag::InfinitiveMarker,
        "uh" => BrownTag::Interjection,
        "vb" => BrownTag::VerbBaseForm,
        "vbd" => BrownTag::VerbPastTense,
        "vbg" => BrownTag::VerbPresentParticiple,
        "vbn" => BrownTag::VerbPastPariciple,
        "vbz" => BrownTag::VerbThirdSingularPresent,
        "wdt" => BrownTag::DeterminerWH,
        "wp$" => BrownTag::PossessiveWHPronoun,
        "wpo" => BrownTag::ObjectiveWHPronoun,
        "wps" => BrownTag::NominativeWHPronoun,
        "wql" => BrownTag::QualifierWH,
        "wrb" => BrownTag::AdverbWH,
        _ => BrownTag::None,
    };

    tags::<BrownTag>::TagPair{word: new_word, tag: new_tag}
}

pub enum BrownTag {
    SentenceCloser,
    LeftParen,
    RightParen,
    Not,
    Dash,
    Comma,
    Colon,
    PreQualifier,
    PreQuantifierN,
    PreQuantifierX,
    PostDeterminer,
    Article,
    Be,
    Were,
    Was,
    Being,
    Am,
    Been,
    Are,
    Is,
    CoordinatingConjunction,
    CardinalNumeral,
    SubordinatingConjunction,
    Do,
    Did,
    Does,
    SingularDeterminer,
    DeterminerQualifier,
    PluralDeterminer,
    DoubleConjunction,
    Existential,
    ForeignWord,
    WordInHeadline,
    Have,
    HadPast,
    Having,
    HadPastParticiple,
    Has,
    Preposition,
    Adjective,
    ComparativeAdjective,
    SemSuperlativeAdjective,
    MorphSuperlativeAdjective,
    ModalAuxiliary,
    Cited,
    Noun,
    PossessiveSingularNoun,
    PluralNoun,
    PossessivePluralNoun,
    ProperNoun,
    PossessiveProperNoun,
    PluralProperNoun,
    PossessivePluralProperNoun,
    AdverbialNoun,
    PluralAdverbialNoun,
    OrdinalNumeral,
    NominalPronoun,
    PossessiveNominalPronoun,
    PossessivePersonalPronoun,
    SecondPossessivePronoun,
    SingularReflexivePersonalPronoun,
    PluralReflexivePersonalPronoun,
    ObjectivePersonalPronoun,
    SingularNominativePronoun,
    OtherNominativePersonalPronoun,
    Qualifier,
    PostQualifier,
    Adverb,
    ComparativeAdverb,
    SuperlativeAdverb,
    NominalAdverb,
    AdverbParticle,
    WordInTitle,
    InfinitiveMarker,
    Interjection,
    VerbBaseForm,
    VerbPastTense,
    VerbPresentParticiple,
    VerbPastPariciple,
    VerbThirdSingularPresent,
    DeterminerWH,
    PossessiveWHPronoun,
    ObjectiveWHPronoun,
    NominativeWHPronoun,
    QualifierWH,
    AdverbWH,
    None,
}
